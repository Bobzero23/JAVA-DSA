Linked list is just like a train, it has a head and a tail and the independent cars.

DIFFERENCES BETWEEN LINKED LISTS AND ARRAYS
+ Linked list has links between its elements
+ Linked list has good for inserting and deleting elements
+ Linked list is better for shifting elements
+ You don't have to initialize the size of the linked list while creating it
+ Arrays are better for small data set

TYPES OF LINKED LISTS
+ Singly Linked list -> a normal linked list every element has address of the previous element
+ Circular Singly Linked list -> a normal singly linked list with the tail has a reference to the head
+ Doubly Linked list -> every element has the address of the next and the previous element
+ Circular Doubly Linked list -> a doubly linked list with the tail has a reference to the head


HOW TO IMPLEMENT A SINGLY LINKED LIST
+ Create an empty head and tail
+ Create an empty node
+ Initialize the data type of the node
+ link the tail and the head with a created node

INSERTION IN SINGLY LINKED LIST
+ IF THERE IS NOTHING IN THE LINKED LIST
- Simply connect the head and the tail to the new created node and set next to null
+ TO THE BEGINNING
- Node.next = head
- Head = node
- Node.tail = null
+ TO THE MIDDLE
- Find location(loop)
- Current.next = node
- Node.next = Next_node
+ TO THE LAST
- Node.next = null
- Last.next = node
- Tail = node

TRAVERSAL IN SINGLY LINKED LIST
+ This one is too easy, simply initialize a new node as a head and then loop through the nodes and display each
  node and after displaying a node set node we created to as the next node that is all.

SEARCHING IN SINGLY LINKED LIST
+ This one is also pretty easy, simply initialize a new node as head and loop through all nodes and check if the
  current node value is equal to the value we are searching if node set the current as the next node until you
  find the node you are looking for if you wont find the node simply return FALSE and then display a message.

DELETION IN SINGLY LINKED LIST BY THE GIVEN LOCATION
+ Firstly check if the singly list is empty or not
+ Initialize a temporary new node as head
+ Then check if you have to delete the first node then assign the head to the next node
+ check if the size is zero then the node we deleted was the only node that was in the linked list so then
  set the tail to null too
+ Check if you are deleting the last element and initialize a temp node as head
+ Use for loop to find the element before the last element.. meh follow the code

DELETION OF ENTIRE SINGLY LINKED LIST
+ Simply set the head and the tail as null and that is it.. garbage collector will delete all the elements bcoz
  they don't have any connection with them


